@using System.Net.Http.Json
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Components.Authorization
@using Parkman.Frontend.Services
@using Parkman.Shared.Enums
@implements IDisposable
<header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold" href="/">
                <i class="bi bi-car-front-fill me-1"></i> Parkman
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain" aria-controls="navbarMain" aria-expanded="false" aria-label="Přepnout navigaci">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarMain">
                <!-- Levá strana -->
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="bi bi-house-door-fill me-1"></i>Domů</a>
                    </li>
                </ul>

                <!-- Pravá strana -->
                <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                    @if (isLoggedIn)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/dashboard">
                                <i class="bi bi-speedometer2 me-1"></i>Dashboard
                            </a>
                        </li>
                        @if (isAdmin)
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="/manage-parking">
                                    <i class="bi bi-tools me-1"></i>Admin
                                </a>
                            </li>
                        }
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="profileDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-circle me-1"></i>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                                @if (profile != null)
                                {
                                    <li><span class="dropdown-item-text fw-bold">@profile.FirstName @profile.LastName</span></li>
                                    <li><span class="dropdown-item-text text-muted">@profile.Email</span></li>
                                }
                                else
                                {
                                    <li><span class="dropdown-item-text">Loading...</span></li>
                                }
                            </ul>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="" @onclick="Logout">
                                <i class="bi bi-box-arrow-right me-1"></i>Logout
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/register">
                                <i class="bi bi-person-plus-fill me-1"></i>Registrace
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/login">
                                <i class="bi bi-box-arrow-in-right me-1"></i>Přihlášení
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
</header>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] private AuthService Auth { get; set; } = default!;
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private bool isLoggedIn;
    private bool isAdmin;
    private ProfileDto? profile;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateChanged;
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = state.User.Identity?.IsAuthenticated ?? false;
        isAdmin = state.User.IsInRole("Administrator");
        if (isLoggedIn)
        {
            await LoadProfile();
        }
    }

    private async void AuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        isLoggedIn = state.User.Identity?.IsAuthenticated ?? false;
        isAdmin = state.User.IsInRole("Administrator");
        if (isLoggedIn)
        {
            await LoadProfile();
        }
        else
        {
            profile = null;
        }
        StateHasChanged();
    }

    private async Task Logout()
    {
        await Auth.Logout();
    }

    private async Task LoadProfile()
    {
        try
        {
            profile = await Http.GetFromJsonAsync<ProfileDto>("api/user/profile");
            isAdmin = profile?.Roles?.Contains("Administrator") ?? false;
        }
        catch (HttpRequestException)
        {
            Navigation.NavigateTo("/error?message=Unable%20to%20reach%20the%20server.");
            profile = null;
            isAdmin = false;
        }
    }

    private class ProfileDto
    {
        public string Email { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string? LicensePlate { get; set; }
        public string? Brand { get; set; }
        public string? VehicleType { get; set; }
        public string? PropulsionType { get; set; }
        public List<string>? Roles { get; set; }
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthStateChanged;
    }
}
