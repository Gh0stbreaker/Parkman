@page "/login"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Blazorise
@using Parkman.Frontend.Services

<div class="container py-4">
    <h3 class="text-center mb-4 h4">Login</h3>

    <EditForm Model="_model" OnValidSubmit="HandleLogin" class="col-md-6 mx-auto card p-4">
        <DataAnnotationsValidator />
        <Forms.ValidationSummary />
        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-envelope me-1"></i>
                Email
            </label>
            <InputText @bind-Value="_model.Email" class="form-control" />
            <ValidationMessage For="@(() => _model.Email)" class="text-danger text-sm" />
        </div>
        <div class="mb-3">
            <label class="form-label">
                <i class="bi bi-lock me-1"></i>
                Password
            </label>
            <div class="input-group">
                <InputText @bind-Value="_model.Password" type="@(showPassword ? "text" : "password")" class="form-control" />
                <button type="button" class="btn btn-outline-secondary" @onclick="() => showPassword = !showPassword">@(showPassword ? "Hide" : "Show")</button>
            </div>
            <ValidationMessage For="@(() => _model.Password)" class="text-danger text-sm" />
        </div>
        <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
            @(isSubmitting ? "Logging in..." : "Login")
        </button>
        @if (errorMessage != null)
        {
            <p class="text-danger text-center mt-3">@errorMessage</p>
        }
    </EditForm>
</div>

@code {
    private LoginFormModel _model = new();
    private bool showPassword;
    private bool isSubmitting;
    private string? errorMessage;

    [Inject] private AuthService Auth { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private async Task HandleLogin()
    {
        isSubmitting = true;
        errorMessage = null;
        var success = await Auth.Login(_model.Email, _model.Password);
        if (success)
        {
            Navigation.NavigateTo("/dashboard");
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
        isSubmitting = false;
    }

    public class LoginFormModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
