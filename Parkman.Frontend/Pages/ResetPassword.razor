@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using Parkman.Shared.Models

<div class="container py-4">
    <h3 class="text-center mb-4 h4">Reset Password</h3>

    <EditForm EditContext="_editContext" OnValidSubmit="Handle" class="col-md-6 mx-auto card p-4">
        <DataAnnotationsValidator />
        <Forms.ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText @bind-Value="_model.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => _model.Password)" class="text-danger text-sm" />
        </div>
        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <InputText @bind-Value="_model.ConfirmPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => _model.ConfirmPassword)" class="text-danger text-sm" />
        </div>
        <button type="submit" class="btn btn-primary w-100" disabled="@isSubmitting">
            @(isSubmitting ? "Resetting..." : "Reset Password")
        </button>
    </EditForm>
    @if (message != null)
    {
        <p class="text-center mt-3">@message</p>
    }
</div>

@code {
    private ResetPasswordRequest _model = new();
    private EditContext _editContext = default!;
    private bool isSubmitting;
    private string? message;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("email", out var e))
        {
            _model.Email = e;
        }
        if (query.TryGetValue("token", out var t))
        {
            _model.Token = t;
        }
        _editContext = new EditContext(_model);
    }

    private async Task Handle()
    {
        isSubmitting = true;
        message = null;
        HttpResponseMessage response;
        try
        {
            response = await Http.PostAsJsonAsync("api/auth/reset-password", _model);
        }
        catch (HttpRequestException)
        {
            Navigation.NavigateTo("/error?message=Unable%20to%20reach%20the%20server.");
            isSubmitting = false;
            return;
        }

        if (response.IsSuccessStatusCode)
        {
            message = "Password reset successful.";
        }
        else
        {
            message = "Password reset failed.";
        }
        isSubmitting = false;
    }
}
