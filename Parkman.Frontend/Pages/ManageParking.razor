@page "/manage-parking"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles="Administrator")]

<h3 class="mb-4">Manage Parking</h3>

<EditForm Model="lot" OnValidSubmit="CreateLot" class="card p-3 mb-3" Style="max-width:600px">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="lot.Name" />
        <ValidationMessage For="@(() => lot.Name)" class="text-danger small mt-1" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address</label>
        <InputText class="form-control" @bind-Value="lot.Address" />
        <ValidationMessage For="@(() => lot.Address)" class="text-danger small mt-1" />
    </div>

    <h5>Parking Spots</h5>
    @foreach (var spot in lot.Spots)
    {
        <div class="border rounded p-2 mb-2">
            <div class="mb-2">
                <label class="form-label">Label</label>
                <InputText class="form-control" @bind-Value="spot.Label" />
            </div>
            <div class="mb-2">
                <label class="form-label">Type</label>
                <InputSelect class="form-select" @bind-Value="spot.Type">
                    @foreach (var v in Enum.GetValues<ParkingSpotType>())
                    {
                        <option value="@v">@v</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-2">
                <label class="form-label">Accessibility</label>
                <InputSelect class="form-select" @bind-Value="spot.Accessibility">
                    @foreach (var v in Enum.GetValues<ParkingSpotAccessibility>())
                    {
                        <option value="@v">@v</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-2">
                <label class="form-label">Allowed Propulsion</label>
                <InputSelect class="form-select" @bind-Value="spot.AllowedPropulsion">
                    @foreach (var v in Enum.GetValues<ParkingSpotAllowedPropulsionType>())
                    {
                        <option value="@v">@v</option>
                    }
                </InputSelect>
            </div>
        </div>
    }
    <button type="button" class="btn btn-secondary me-2" @onclick="AddSpot">Add Spot</button>
    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Create Lot</button>
</EditForm>

@if (success)
{
    <div class="alert alert-success">Created successfully.</div>
}

@code {
    private CreateParkingLotRequest lot = new();
    private bool isSubmitting;
    private bool success;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private void AddSpot()
    {
        lot.Spots.Add(new CreateParkingSpotRequest());
    }

    private async Task CreateLot()
    {
        isSubmitting = true;
        success = false;
        HttpResponseMessage response;
        try
        {
            response = await Http.PostAsJsonAsync("api/admin/parking/lots", lot);
        }
        catch (HttpRequestException)
        {
            Navigation.NavigateTo("/error?message=Unable%20to%20reach%20the%20server.");
            isSubmitting = false;
            return;
        }

        if (response.IsSuccessStatusCode)
        {
            success = true;
            lot = new CreateParkingLotRequest();
        }
        isSubmitting = false;
    }
}
